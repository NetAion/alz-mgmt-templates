---
name: Continuous Integration
on:
  workflow_call:
    inputs:
      root_module_folder_relative_path:
        description: 'Root Module Folder Relative Path'
        default: '.'
        type: string
      terraform_cli_version:
        description: 'Terraform CLI Version'
        default: 'latest'
        type: string

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    permissions:
      contents: read 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Save PR Number to File
        if: github.event_name == 'pull_request'
        run: echo "${{ github.event.pull_request.number }}" > pr_number.txt

      - name: Upload PR Metadata
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: pr-metadata
          path: pr_number.txt        

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Terraform Format Check
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          fmt \
          -check \
          -recursive

      - name: Terraform Init
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          init \
          -backend=false

      - name: Terraform Validate
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          validate

  generate-script:
    name: Generate FortiManager Package Script
    needs: validate
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      FMG_SCRIPT: "generated/fortimanager/fmg-azure-hub-package-for-pls.txt"
    outputs:
      script_changed: ${{ steps.commit.outputs.script_changed }}
      script_diff_hash: ${{ steps.commit.outputs.script_diff_hash }}

    steps:
      - name: Checkout PR Source Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Render FortiManager Script from Terraform Console (no backend)
        run: |
          mkdir -p ./generated/fortimanager
          mkdir -p ./scratch
          cp *fmg* locals.connectivity*.tf *.tfvars* variables*.tf ./scratch/
          cd scratch
          terraform init -backend=false
          terraform console <<EOF | awk '/^<<EOT$/ {flag=1; next} /^EOT$/ {flag=0} flag' > ../$FMG_SCRIPT
                    local.fmg_script
          EOF
          echo "‚úÖ Script written to $FMG_SCRIPT"

      - name: Commit Script to PR Branch (if changed)
        id: commit
        run: |
          if [ -f "$FMG_SCRIPT" ]; then
            git config user.name "GitOps Bot"
            git config user.email "gitops@example.com"
            git add "$FMG_SCRIPT"
            if git diff --cached --quiet; then
              echo "script_changed=false" >> $GITHUB_OUTPUT          
            else
              echo "script_changed=true" >> $GITHUB_OUTPUT
              git commit -m "chore(fortimanager): update Azure-Hub package script for proposed change"
              git push origin HEAD:${{ github.head_ref }}
            fi
          else
            echo "üîÑ Script file `${FMG_SCRIPT}` was not generated"
            echo "script_changed=false" >> $GITHUB_OUTPUT
          fi

          # GitHub's file-level diff anchors use the SHA-256 of the relative path
          hash=$(echo -n "${FMG_SCRIPT}" | sha256sum | awk '{print $1}')
          echo "script_diff_hash=$hash" >> $GITHUB_OUTPUT

      - name: Upload FortiManager Script as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmg-azure-hub-package-for-pls
          path: ${{ env.FMG_SCRIPT }}
        
  plan:
    name: Validate Terraform Plan
    needs: [validate, generate-script]
    runs-on: ubuntu-latest
    concurrency: mgmt2-tfstate
    environment: prod-ci-plan # GitHub free tier does not support environments in private repos, but it is needed for OIDC authentication
    permissions:
      # NOTE: When modifying the token subject claims and adding `environment`.
      # If the `id-token` permission is granted at the workflow level
      # and the workflow has at least one job that does not specify an environment
      # then the action will fail with an internal error.
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_version }}

      - name: Install tf-summarize
        run: |
          curl -sL -o tf-summarize.deb https://github.com/dineshba/tf-summarize/releases/download/v0.3.14/tf-summarize_0.3.14_linux_amd64.deb
          sudo dpkg -i tf-summarize.deb
          tf-summarize -v
          rm tf-summarize.deb

      - name: Terraform Init
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          init \
          -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
          -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        id: plan
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          plan \
          -input=false \
          -out=tfplan
          
          terraform show -no-color tfplan > tfplan_output.txt
          if grep -q "No changes. Your infrastructure matches the configuration." tfplan_output.txt; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "summary=" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            terraform show -json tfplan | tf-summarize -tree \
            | sed -r "s/\x1B\[[0-9;]*[mK]//g" \
            | sed -r "s/\(\+\)/‚úÖ/g; s/\(\~\)/‚ö†Ô∏è/g; s/\(\-\)/‚ùå/g" \
            | tee tf-summary.txt
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            cat tf-summary.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Update Pull Request
        if: (success() || failure()) && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutcome = "${{ steps.plan.outcome }}";  
            const noChanges = "${{ steps.plan.outputs.no_changes }}" === 'true';
            const fileHash = "${{ needs.generate-script.outputs.script_diff_hash }}";
            const diffUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}/files#diff-${fileHash}`;
            const scriptChanged = "${{ needs.generate-script.outputs.script_changed }}" === 'true';
            let body = '';

            if (planOutcome === 'success') {
              if (noChanges) {
                body = `### Terraform Plan üìñ \`${planOutcome}\`, no changes detected
            <details><summary>Click to expand and check the plan details...</summary>

            ‚úÖ Terraform has compared your real infrastructure against your configuration and found no differences.

            #### Next Steps
            - üîÑ **Approve** this pull request to continue with the CD pipeline deployment (no changes will be applied).
            - If you're not happy with the plan, please comment on the pull request to discuss it.
            - See the CI action for more detailed logs if needed.`;
              } else {
                const tfSummary = `${{ steps.plan.outputs.summary }}`;
                body = `### Terraform Plan \`${planOutcome}\`
            <details><summary>üìã Click to expand and check the plan...</summary>

            #### Proposed Changes
            \`\`\`
            ${tfSummary}
            \`\`\`
            - Where:
              - ‚úÖ indicates a resource that will be created.
              - ‚ö†Ô∏è indicates a resource that will be updated in place.
              - ‚ùå indicates a resource that will be destroyed.

            #### Next Steps
            - üîÑ **Approve** this pull request to continue and deploy the changes to production. 
            - If you're not happy with the plan, please comment on the pull request to discuss it.
            - See the CI action for more detailed logs if needed.
            - Note, there will be one further gate during the CD pipeline to confirm the plan before applying it.`;
              }
            } else {
              body = `### Terraform Plan \`${planOutcome}\`
            <details><summary>üìã Click to expand...</summary>
            
            #### Next Steps
            - ‚ö†Ô∏è Please review the CI action logs.`;
            }

            // Append script notice if script changed
            if (scriptChanged) {
              body += `
            - üîÑ **Review** [Azure-Hub firewall package script changes](${diffUrl}) before manually uploading to FortiManager and running during the change window.
            </details>`;
            } else {
              body += `
            </details>`;
            }

            body += `

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
