---
name: Continuous Delivery
on:
  workflow_call:
    inputs:
      terraform_action:
        description: 'Terraform Action to Perform'
        default: 'apply'
        type: string
      root_module_folder_relative_path:
        description: 'Root Module Folder Relative Path'
        default: '.'
        type: string
      terraform_cli_version:
        description: 'Terraform CLI Version'
        default: 'latest'
        type: string

jobs:
  plan:
    name: Plan with Terraform
    runs-on:
      ubuntu-latest
    concurrency: mgmt-tfstate
    environment: prod-ci-plan
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_versions }}

      - name: Terraform Init
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          init \
          -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
          -backend-config="key=terraform.tfstate"

      - name: Terraform Plan for ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          # shellcheck disable=SC2086
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          plan \
          -out=tfplan \
          -input=false \
          ${{ inputs.terraform_action == 'destroy' && '-destroy' || '' }}

      - name: Create Module Artifact
        run: |
          $stagingDirectory = "staging"
          $rootModuleFolder = "${{inputs.root_module_folder_relative_path}}"
          New-Item -Path . -Name $stagingDirectory -ItemType "directory"
          Copy-Item -Path "./*" -Exclude @(".git", ".terraform", ".github",  $stagingDirectory) -Recurse -Destination "./$stagingDirectory"

          $rootModuleFolderTerraformFolder = Join-Path -Path "./$stagingDirectory" -ChildPath $rootModuleFolder -AdditionalChildPath ".terraform"
          if(Test-Path -Path $rootModuleFolderTerraformFolder) {
            Remove-Item -Path $rootModuleFolderTerraformFolder -Recurse -Force
          }

        shell: pwsh

      - name: Publish Module Artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ./staging/

      - name: Show the Plan for Review
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          show \
          tfplan

  apply:
    needs: plan
    name: Apply with Terraform
    runs-on:
      ubuntu-latest
    concurrency: mgmt-tfstate
    environment: prod-cd-apply
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      AZAPI_RETRY_GET_AFTER_PUT_MAX_TIME: "60m" # Accounts for eventually consistent management group permissions propagation

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: module

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ inputs.terraform_cli_versions }}

      - name: Terraform Init
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          init \
          -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
          -backend-config="key=terraform.tfstate"

      - name: Terraform ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          terraform \
          -chdir="${{inputs.root_module_folder_relative_path}}" \
          apply \
          -input=false \
          -auto-approve \
          tfplan

      - name: Ensure jq is Installed
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Get PLS â†” FQDN Output (if exists)
        id: tfout
        run: |
          output=$(terraform output -json pls_fqdn_pairs || echo "null")
          echo "$output" > output.json
          echo "has_output=$(jq 'type != \"null\"' output.json)" >> "$GITHUB_OUTPUT"

      - name: Format PLS â†” FQDN Table (if PLS output exists)
        if: steps.tfout.outputs.has_output == 'true'
        run: |
          echo "### ðŸ”— FQDNs and Delivered Private Link Services" >> table.md
          echo "| App. Connection String FQDN | Private Link Service Alias |" >> table.md
          echo "|-----------------------------|----------------------------|" >> table.md

          jq -r '
            to_entries[] |  # e.g. lb01
            .value | to_entries[] |  # e.g. db_agentcarter, {...}
            "| \(.value.app_service_fqdn) | \(.value.pls_alias) |"
          ' output.json >> table.md

      - name: Upload PLS â†” FQDN Table to Actions Summary (if table exists)
        if: steps.tfout.outputs.has_output == 'true'
        run: cat table.md >> $GITHUB_STEP_SUMMARY

      # Retrieves the PR number saved during the CI workflow, enabling this push-triggered
      # CD workflow to comment back on the correct pull request.
      - name: Download PR Metadata
        uses: actions/download-artifact@v4
        with:
          name: pr-metadata-${{ github.sha }}

      - name: Read PR Number
        id: pr
        run: echo "pr_number=$(cat pr_number.txt)" >> "$GITHUB_OUTPUT"

      - name: Post PLS â†” FQDN Table to PR as Comment (if table & PR exist)
        if: steps.tfout.outputs.has_output == 'true' && steps.pr.outputs.pr_number != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('table.md', 'utf8');
            const pr = Number('${{ steps.pr.outputs.pr_number }}');

            github.rest.issues.createComment({
              issue_number: pr,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });